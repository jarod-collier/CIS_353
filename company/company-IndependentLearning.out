SQL> -- ---------------------------------------------------------------
SQL> --
SQL> -- Name: Jarod Collier
SQL> --
SQL> /*(110) Using ROWNUM to limit the size of the result.
SQL> (Notice that SQL and some systems use the LIMIT or TOP clauses.
SQL> Oracle uses ROENUM to accomplish similar tasks.)
SQL> Find the ssn, lname, and salary of only four employees.
SQL> */
SQL> SELECT ssn, lname, salary
  2  FROM Employee
  3  WHERE ROWNUM < 5;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
123456789 Smith                30000                                            
333445555 Wong                 40000                                            
999887777 Zelaya               25000                                            
987654321 Wallace              43000                                            

SQL> 
SQL> --
SQL> /*(115) TOP-N query.
SQL> Find the ssn, lname, and salary of the four highest paid employees.
SQL> */
SQL> SELECT ssn, lname, salary
  2  FROM (SELECT * FROM Employee ORDER BY salary DESC)
  3  WHERE ROWNUM < 5;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
888665555 Borg                 55000                                            
987654321 Wallace              43000                                            
333445555 Wong                 40000                                            
666884444 Narayan              38000                                            

SQL> --
SQL> /*(120) TOP-N query.
SQL> Find the ssn, lname, and salary of the four lowest paid employees
SQL> */
SQL> SELECT ssn, lname, salary
  2  FROM (SELECT * FROM Employee ORDER BY salary)
  3  WHERE ROWNUM < 5;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
999887777 Zelaya               25000                                            
987987987 Jabbar               25000                                            
453453453 English              25000                                            
123456789 Smith                30000                                            

SQL> --
SQL> /*(125) TOP-N query.
SQL> Find the lowest two salaries in the company.(Notice that in our
SQL> database, the two lowest salaries are 25K and 30K.)
SQL> */
SQL> SELECT salary
  2  FROM (SELECT DISTINCT salary FROM Employee ORDER BY salary)
  3  WHERE ROWNUM < 3;

    SALARY                                                                      
----------                                                                      
     25000                                                                      
     30000                                                                      

SQL> --
SQL> /*(130) TOP-N query.
SQL> For every employee whose salary is equal to one of the two lowest salaries,
SQL> Find the ssn, lname, and salary.
SQL> */
SQL> SELECT ssn, lname, salary
  2  FROM employee
  3  WHERE salary in
  4   (SELECT salary
  5   FROM (SELECT DISTINCT salary FROM Employee ORDER BY salary)
  6   WHERE ROWNUM < 3)
  7  ORDER BY salary;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
987987987 Jabbar               25000                                            
453453453 English              25000                                            
999887777 Zelaya               25000                                            
123456789 Smith                30000                                            

SQL> --
SQL> /*(135) RANK query
SQL> Find the rank of the salary 30000 among all salaries.
SQL> (HINT: The ranks in our database are 1 for 25000, 4 for 30000,
SQL> 5 for 38000, and so on.)
SQL> */
SQL> SELECT RANK (30000) WITHIN GROUP
  2  (ORDER BY salary) "Rank of salary 30000"
  3  FROM employee;

Rank of salary 30000                                                            
--------------------                                                            
                   4                                                            

SQL> --
SQL> /*(140) RANK query ... compare with the previous query.
SQL> Find the rank of the salary 31000 among all salaries.
SQL> */
SQL> SELECT RANK (31000) WITHIN GROUP
  2   (ORDER BY salary) "Rank of salary 30000"
  3  FROM employee;

Rank of salary 30000                                                            
--------------------                                                            
                   5                                                            

SQL> --
SQL> /*(145) DENSE RANK query
SQL> Find the dense rank of the salary 30000 among all salaries.
SQL> Hint: The dense ranks in our database are 1 for 25000, 2 for 30000,
SQL> 3 for 38000, and so on.
SQL> */
SQL> SELECT DENSE_RANK (30000) WITHIN GROUP
  2   (ORDER BY salary) "Rank of salary 30000"
  3  FROM employee;

Rank of salary 30000                                                            
--------------------                                                            
                   2                                                            

SQL> --
SQL> /*(150) DENSE RANK query ... compare with the previous query.
SQL> Find the dense rank of the salary 31000 among all salaries.
SQL> Hint: The dense ranks in our database are 1 for 25000, 2 for 30000,
SQL> 3 for 38000, and so on.
SQL> */
SQL> SELECT DENSE_RANK (31000) WITHIN GROUP
  2   (ORDER BY salary) "Rank of salary 30000"
  3  FROM employee;

Rank of salary 30000                                                            
--------------------                                                            
                   3                                                            

SQL> --
SQL> /*(155)HIERARCHICAL query (uses START WITH and CONNECT BY PRIOR)
SQL> Find pairs of SSN's such that the first SSN in the pair is that of an
SQL> employee while the second SSN in the pair is that of his/her supervisor.
SQL> Start with SSN 453453453.
SQL> Hint: The output of your query should be:
SQL> 
SQL> 453453453	     333445555
SQL> 333445555	     888665555
SQL> 888665555	     -
SQL> */
SQL> SELECT ssn, super_ssn
  2  FROM Employee
  3  START WITH ssn = 453453453
  4  CONNECT BY PRIOR super_ssn = ssn;

SSN       SUPER_SSN                                                             
--------- ---------                                                             
453453453 333445555                                                             
333445555 888665555                                                             
888665555                                                                       

SQL> ---------------------------------------------------------------
SQL> SET ECHO OFF
